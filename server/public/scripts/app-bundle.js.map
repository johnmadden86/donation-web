{"version":3,"sources":["src/app.js","src/environment.js","src/home.js","src/main.js","src/resources/index.js","src/services/async-http-client.js","src/services/fixtures.js","src/services/messages.js","src/services/tweet-service.js","src/view-models/dashboard/dashboard.js","src/view-models/login/login.js","src/view-models/logout/logout.js","src/view-models/new-tweet/new-tweet.js","src/view-models/sign-up/sign-up.js","src/view-models/stats/stats.js","src/view-models/timeline/timeline.js"],"names":["App","ts","au","ea","subscribe","router","navigate","replace","trigger","reset","msg","status","setRoot","attached","isAuthenticated","then","navigateToRoute","configureRouter","config","map","route","name","moduleId","nav","title","debug","testing","Home","aurelia","mapUnknownRoutes","configure","use","standardConfiguration","feature","developmentLogging","plugin","start","AsyncHttpClient","httpClient","fixtures","http","withBaseUrl","baseUrl","get","url","post","obj","delete","authenticate","user","response","content","localStorage","tweet","JSON","stringify","success","configuration","withHeader","token","publish","catch","message","clearAuthentication","authenticated","donation","auth","parse","Fixtures","TotalUpdate","total","LoginStatus","TweetService","data","ac","users","tweets","register","firstName","lastName","email","password","newUser","getUsers","login","logout","newTweet","text","push","res","length","console","log","getTweets","Dashboard","Login","tweetService","prompt","e","Logout","NewTweet","SignUp","showSignUp","Stats","Timeline"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {inject, Aurelia} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus} from './services/messages';\nimport TweetService from './services/tweet-service';\n\n@inject(TweetService, Aurelia, EventAggregator)\nexport class App {\n\n  constructor(ts, au, ea) {\n    this.au = au;\n    this.ts = ts;\n    ea.subscribe(LoginStatus, msg => {\n      this.router.navigate('/', { replace: true, trigger: false });\n      this.router.reset();\n      if (msg.status === true) {\n        au.setRoot('home');\n      } else {\n        au.setRoot('app');\n      }\n    });\n  }\n\n  attached() {\n    if (this.ts.isAuthenticated()) {\n      this.au.setRoot('home').then(() => {\n        this.router.navigateToRoute('dashboard');\n      });\n    }\n  }\n\n  configureRouter(config, router) {\n    config.map([\n      { route: ['', 'login'], name: 'login', moduleId: 'view-models/login/login', nav: true, title: 'Login' },\n      { route: 'sign-up', name: 'sign-up', moduleId: 'view-models/sign-up/sign-up', nav: true, title: 'Sign Up' }\n    ]);\n    this.router = router;\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import { inject, Aurelia } from 'aurelia-framework';\n\n@inject(Aurelia)\nexport class Home {\n\n  constructor(au) {\n    this.aurelia = au;\n  }\n\n  configureRouter(config, router) {\n    config.map([\n      { route: ['', 'home'], name: 'new-tweet', moduleId: 'view-models/new-tweet/new-tweet', nav: true, title: 'New Tweet' },\n      { route: 'timeline', name: 'timeline', moduleId: 'view-models/timeline/timeline', nav: true, title: 'Timeline' },\n      { route: 'stats', name: 'stats', moduleId: 'view-models/stats/stats', nav: true, title: 'Stats' },\n      { route: 'dashboard', name: 'dashboard', moduleId: 'view-models/dashboard/dashboard', nav: true, title: 'Dashboard' }\n    ]);\n    this.router = router;\n\n    config.mapUnknownRoutes(instruction => {\n      return 'home';\n    });\n  }\n}\n","import environment from './environment';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","import {inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\nimport Fixtures from './fixtures';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus} from './messages';\n\n@inject(HttpClient, Fixtures, EventAggregator)\nexport default class AsyncHttpClient {\n\n  constructor(httpClient, fixtures, ea) {\n    this.http = httpClient;\n    this.http.configure(http => {\n      http.withBaseUrl(fixtures.baseUrl);\n    });\n    this.ea = ea;\n  }\n\n  get(url) {\n    return this.http.get(url);\n  }\n\n  post(url, obj) {\n    return this.http.post(url, obj);\n  }\n\n  delete(url) {\n    return this.http.delete(url);\n  }\n\n  authenticate(url, user) {\n    this.http.post(url, user).then(response => {\n      const status = response.content;\n      localStorage.tweet = JSON.stringify(response.content);\n      if (status.success) {\n        this.http.configure(configuration => {\n          configuration.withHeader('Authorization', 'bearer ' + response.content.token);\n        });\n      }\n      this.ea.publish(new LoginStatus(status));\n    }).catch(error => {\n      const status = {\n        success: false,\n        message: 'service not available'\n      };\n      this.ea.publish(new LoginStatus(status));\n    });\n  }\n\n  clearAuthentication() {\n    localStorage.tweet = null;\n    this.http.configure(configuration => {\n      configuration.withHeader('Authorization', '');\n    });\n  }\n\n\n  isAuthenticated() {\n    let authenticated = false;\n    if (localStorage.donation !== 'null') {\n      authenticated = true;\n      this.http.configure(http => {\n        const auth = JSON.parse(localStorage.tweet);\n        http.withHeader('Authorization', 'bearer ' + auth.token);\n      });\n    }\n    return authenticated;\n  }\n}\n","export default class Fixtures {\n  baseUrl = 'http://localhost:4000';\n}\n","export class TotalUpdate {\n  constructor(total) {\n    this.total = total;\n  }\n}\n\nexport class LoginStatus {\n  constructor(status) {\n    this.status = status;\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport Fixtures from './fixtures';\nimport {LoginStatus, TotalUpdate} from './messages';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport AsyncHttpClient from './async-http-client';\n\n@inject(Fixtures, EventAggregator, AsyncHttpClient)\nexport default class TweetService {\n\n  users = [];\n  tweets = [];\n  total = 0;\n\n  constructor(data, ea, ac) {\n    this.ea = ea;\n    this.ac = ac;\n  }\n\n  register(firstName, lastName, email, password) {\n    const newUser = {\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      password: password\n    };\n    this.ac.post('/api/users', newUser)\n      .then(res => {\n        this.getUsers();\n      });\n  }\n\n  login(email, password) {\n    const user = {\n      email: email,\n      password: password\n    };\n    this.ac.authenticate('/api/users/authenticate', user);\n  }\n\n  logout() {\n    const status = {\n      success: false,\n      message: ''\n    };\n    this.ac.clearAuthentication();\n    this.ea.publish(new LoginStatus(status));\n  }\n\n  newTweet(text) {\n    let tweet = {\n      text: text\n    };\n    this.ac.post('/api/tweets', tweet)\n      .then(res => {\n        this.tweets.push(res.content);\n        this.total = this.tweets.length;\n        console.log('New tweet added: \\\"' + tweet.text + '\\\". ' + this.total + ' tweets in total.');\n        this.ea.publish(new TotalUpdate(this.total));\n      });\n  }\n\n  getTweets() {\n    this.ac.get('/api/tweets').then(res => {\n      this.tweets = res.content;\n    });\n  }\n\n  getUsers() {\n    this.ac.get('/api/users').then(res => {\n      this.users = res.content;\n    });\n  }\n\n  isAuthenticated() {\n    return this.ac.isAuthenticated();\n  }\n}\n","export class Dashboard {\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class Login {\n\n  email = 'marge@simpson.com';\n  password = 'secret';\n\n  constructor(ts) {\n    this.tweetService = ts;\n    this.prompt = '';\n  }\n\n  login(e) {\n    console.log(`Trying to log in ${this.email}`);\n    this.tweetService.login(this.email, this.password);\n  }\n}\n","import TweetService from '../../services/tweet-service';\nimport {inject} from 'aurelia-framework';\n\n@inject(TweetService)\nexport class Logout {\n\n  constructor(ts) {\n    this.tweetService = ts;\n  }\n\n  logout() {\n    console.log('logging out');\n    this.tweetService.logout();\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class NewTweet {\n\n  text = 'Hello world!';\n\n  constructor(ts) {\n    this.tweetService = ts;\n  }\n\n  newTweet() {\n    this.tweetService.newTweet(this.text);\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class SignUp {\n\n  firstName = 'Marge';\n  lastName = 'Simpson';\n  email = 'marge@simpson.com';\n  password = 'secret';\n\n  constructor(ts) {\n    this.tweetService = ts;\n  }\n\n  register(e) {\n    this.showSignUp = false;\n    this.tweetService.register(this.firstName, this.lastName, this.email, this.password);\n    this.tweetService.login(this.email, this.password);\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport {TotalUpdate} from '../../services/messages';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport TweetService from '../../services/tweet-service';\n\n@inject(EventAggregator, TweetService)\nexport class Stats {\n\n  total = 0;\n\n  constructor(ea, ts) {\n    this.ts = ts;\n    ea.subscribe(TotalUpdate, msg => {\n      this.total = msg.total;\n    });\n  }\n\n  attached() {\n    this.total = this.ts.total;\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class Timeline {\n\n  tweets = [];\n\n  constructor(ts) {\n    this.tweetService = ts;\n    this.tweets = this.tweetService.tweets;\n  }\n}\n"],"sourceRoot":".."}